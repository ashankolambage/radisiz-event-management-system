/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Event;


import CLS.DB;
import Employee.Employee_detailss;
import Main_Menu.Event_calender;
import java.awt.Component;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arjuna
 */
public class AllUpcomingEvents extends javax.swing.JPanel {

    /**
     * Creates new form AllUpcomingEvents
     */
    
    int i = 0;
    private Component RootPanel;
    
    public AllUpcomingEvents() {
        initComponents();
        i = 1;
    }
    
    public static String id = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(1030, 550));
        setMinimumSize(new java.awt.Dimension(1030, 550));
        setPreferredSize(new java.awt.Dimension(1030, 550));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setMaximumSize(new java.awt.Dimension(1030, 550));
        jPanel1.setMinimumSize(new java.awt.Dimension(1030, 550));
        jPanel1.setPreferredSize(new java.awt.Dimension(1030, 550));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });
        jPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel1PropertyChange(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("All events");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reg no", "Date", "Event Name", "Start time", "End time", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 890, 370));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/1406203726_editor_list_view_hambuger_menu.png"))); // NOI18N
        jButton2.setText("View Event Details");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 30));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clean small.png"))); // NOI18N
        jButton3.setText("View Remove Events");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 170, 30));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/1406203781_meanicons_24.png"))); // NOI18N
        jButton7.setText("Remove Event");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 130, 30));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, 500, 50));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/content bar.png"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 30));

        jLabel14.setBackground(new java.awt.Color(51, 51, 51));
        jLabel14.setOpaque(true);
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Search By Date :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });
        jPanel1.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 150, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("To");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, -1, 20));

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });
        jPanel1.add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 150, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/1406203630_672408-search.png"))); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 60, 100, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name Or Id :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 60, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 60, 200, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 550));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int raw = jTable1.getSelectedRowCount();
        if (raw == 1){
            id = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
            Deal.jPanel1.removeAll();
            GroupLayout layout = new GroupLayout(Deal.jPanel1);
            Deal.jPanel1.setLayout(layout);
            Deal_event_details de = new Deal_event_details();
            layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(de, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
            layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(de, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        ResultSet rs = null;
        if (jButton3.getText().equals("View Remove Events")){
            try {
                rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Remove"+"'");
                if (!rs.next()){
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(RootPanel, "There Are No Removed Events", "Information", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Remove"+"'");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            jButton3.setText("View Current Events");
            jButton7.setText("Undo Remove");
            jTextField1.requestFocus();
        }else{
            try {
                jButton3.setText("View Remove Events");
                jButton7.setText("Remove Event");
                rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Not_Remove"+"'");
                if (!rs.next()){
                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(RootPanel, "<html><center>There Are No Registered Events<br>Please Register Events And</br> <br>Try Again</br></center></html>", "Information", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Not_Remove"+"'");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            jButton3.setText("View Remove Events");
            jButton7.setText("Remove Event");
            jTextField1.requestFocus();
        }
        
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
                while (rs.next()){
                    Vector v = new Vector();
                    v.add(rs.getString("event_id"));
                    v.add(rs.getString("event_date_from"));
                    v.add(rs.getString("name"));
                    v.add(rs.getString("time_from"));
                    v.add(rs.getString("time_to"));
                    v.add(rs.getString("location"));
                    dtm.addRow(v);
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        ResultSet rs = null;
        
        if(jTable1.getSelectedRowCount() != 0){
                if (jButton7.getText().equals("Remove Event")){
                String s = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
                try {
                    DB.getCon().createStatement().executeUpdate("UPDATE event_details SET state = '"+"Remove"+"' WHERE event_id = '"+s+"'");
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Not_Remove"+"'");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }else{
                String s = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
                try {
                    DB.getCon().createStatement().executeUpdate("UPDATE event_details SET state = '"+"Not_Remove"+"' WHERE event_id = '"+s+"'");
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Remove"+"'");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
                try {
                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);
                    while (rs.next()){
                        Vector v = new Vector();
                        v.add(rs.getString("event_id"));
                        v.add(rs.getString("event_date_from"));
                        v.add(rs.getString("name"));
                        v.add(rs.getString("time_from"));
                        v.add(rs.getString("time_to"));
                        v.add(rs.getString("location"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (evt.getClickCount() == 2){
            int raw = jTable1.getSelectedRowCount();
            if (raw == 1){
                id = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
                Deal.jPanel1.removeAll();
                GroupLayout layout = new GroupLayout(Deal.jPanel1);
                Deal.jPanel1.setLayout(layout);
                Deal_event_details de = new Deal_event_details();
                layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(de, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
                layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(de, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int ii = 0;
        if ((jDateChooser1.getDate() == null) &(jDateChooser2.getDate() != null)){
            ii = 1;
        }else if ((jDateChooser1.getDate() != null) &(jDateChooser2.getDate() == null)){
            ii = 1;
        }
        if (ii == 1){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(RootPanel, "Please Select Next Date");
        }else{
            ResultSet rs = null;
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        if (jTextField1.getText().equals("") & jDateChooser1.getDate() != null & jDateChooser2.getDate() != null){
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date d = jDateChooser1.getDate();
            String date1 = sdf.format(d);
            d = jDateChooser2.getDate();
            String date2 = sdf.format(d);
            try {
                rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_date_from BETWEEN '"+date1+"' AND '"+date2+"'");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }else if ((!jTextField1.getText().equals("")) & jDateChooser1.getDate() != null & jDateChooser2.getDate() != null){
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date d = jDateChooser1.getDate();
            String date1 = sdf.format(d);
            d = jDateChooser2.getDate();
            String date2 = sdf.format(d);

            if (jTextField1.getText().length() >= 3){
                String s = id.substring(0, 3);
                try {
                    if (s.equals("ev_")){
                        rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_date_from BETWEEN '"+date1+"' AND '"+date2+"' AND event_id LIKE '"+jTextField1.getText()+"%'");
                    }else{
                        rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_date_from BETWEEN '"+date1+"' AND '"+date2+"' AND name LIKE '%"+jTextField1.getText()+"%'");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }else{
                try {
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_date_from BETWEEN '"+date1+"' AND '"+date2+"' AND name LIKE '%"+jTextField1.getText()+"%'");
                    System.out.println("please");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }else if ((!jTextField1.getText().equals("")) & jDateChooser1.getDate() == null & jDateChooser2.getDate() == null){
            if (jTextField1.getText().length() >= 3){
                String s = id.substring(0, 3);
                try {
                    if (s.equals("ev_")){
                        rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_id LIKE '"+jTextField1.getText()+"%'");
                    }else{
                        rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE name LIKE '%"+jTextField1.getText()+"%'");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }else{
                try {
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE name LIKE '%"+jTextField1.getText()+"%'");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        try {
            while (rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("event_id"));
                v.add(rs.getString("event_date_from"));
                v.add(rs.getString("name"));
                v.add(rs.getString("time_from"));
                v.add(rs.getString("time_to"));
                v.add(rs.getString("location"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained

        if (i == 1){
            loadtable();
            i = 2;
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

        id = jTextField1.getText();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

    }//GEN-LAST:event_jTextField1KeyTyped

    private void jPanel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel1PropertyChange

        jTextField1.requestFocus();
        jDateChooser2.setEnabled(false);
    }//GEN-LAST:event_jPanel1PropertyChange

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusGained

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange

        jDateChooser2.setMinSelectableDate(jDateChooser1.getDate());
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange

        jDateChooser2.setEnabled(true);
    }//GEN-LAST:event_jDateChooser1PropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void loadtable() {
        ResultSet rs = null;
        try {
            rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Not_Remove"+"'");
                if (!rs.next()){
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(RootPanel, "<html><center>There Are No Registered Events<br>Please Register Events And</br> <br>Try Again</br></center></html>", "Information", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE state = '"+"Not_Remove"+"'");
                    if (Event_calender.ddd != null){
                        jDateChooser1.setDate(Event_calender.ddd);
                        jDateChooser2.setDate(Event_calender.ddd);
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        String dd = sdf.format(Event_calender.ddd);
                        rs = DB.getCon().createStatement().executeQuery("SELECT * FROM event_details WHERE event_date_from = '"+dd+"'");
                    }
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            while (rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("event_id"));
                v.add(rs.getString("event_date_from"));
                v.add(rs.getString("name"));
                v.add(rs.getString("time_from"));
                v.add(rs.getString("time_to"));
                v.add(rs.getString("location"));
                dtm.addRow(v);
            }
            Event_calender.ddd = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
