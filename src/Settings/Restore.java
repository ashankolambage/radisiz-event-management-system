/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;

import CLS.DB;
import java.awt.Component;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shehan Perera
 */
public class Restore extends javax.swing.JPanel {
    private Component RootPane;

    /**
     * Creates new form Restore
     */
    public Restore() {
        initComponents();
        loadtable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(163, 163, 163));
        setMaximumSize(new java.awt.Dimension(427, 252));
        setMinimumSize(new java.awt.Dimension(427, 252));
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("Restore Backup");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, 170, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Date", "Time", "User Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 410, 150));

        jButton1.setText("Clear All Backups");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 160, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Password");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 20));
        add(jPasswordField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 180, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (jTable1.getSelectedRowCount() != 0){
            String s = new String(jPasswordField1.getPassword());
            if (s.isEmpty()){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(RootPane, "Please Enter The Password", "Error", JOptionPane.ERROR_MESSAGE);
                jPasswordField1.requestFocus();
            }else{
                try {
                    ResultSet rs = DB.getCon().createStatement().executeQuery("SELECT password FROM login");
                        while (rs.next()){
                            if (rs.getString("password").equals(s)){
                                retstore();
                            }else{
                                Toolkit.getDefaultToolkit().beep();
                                JOptionPane.showMessageDialog(RootPane, "Password Is Incorrect", "Error", JOptionPane.ERROR_MESSAGE);
                                jPasswordField1.setText("");
                                jPasswordField1.requestFocus();
                            }
                        }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String s = new String(jPasswordField1.getPassword());
        if (s.isEmpty()){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(RootPane, "Please Enter The Password", "Error", JOptionPane.ERROR_MESSAGE);
            jPasswordField1.requestFocus();
        }else{
            try {
                ResultSet rs = DB.getCon().createStatement().executeQuery("SELECT password FROM login");
                    while (rs.next()){
                        if (rs.getString("password").equals(s)){
                            int i = JOptionPane.showConfirmDialog(RootPane, "Are You Sure?", "Confirem", JOptionPane.YES_NO_OPTION);
                            if (i == 0){
                                DB.getCon().createStatement().executeUpdate("DELETE FROM backup");
                                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                                dtm.setRowCount(0);
                            }else{
                                jPasswordField1.setText("");
                                jPasswordField1.requestFocus();
                            }
                        }else{
                            Toolkit.getDefaultToolkit().beep();
                            JOptionPane.showMessageDialog(RootPane, "Password Is Incorrect", "Error", JOptionPane.ERROR_MESSAGE);
                            jPasswordField1.requestFocus();
                        }
                    }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange

        jPasswordField1.requestFocus();
    }//GEN-LAST:event_formPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void loadtable() {
        try {
            ResultSet rs = DB.getCon().createStatement().executeQuery("SELECT * FROM backup");
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            while (rs.next()) {                
                Vector v = new Vector();
                v.add(rs.getString("backup_id"));
                v.add(rs.getString("date"));
                v.add(rs.getString("time"));
                v.add(rs.getString("user_name"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void retstore() {
        String name = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        try {
            int processComplete;
            String[] executeCmd = new String[]{"mysql", "radisiz_final", "-uroot", "-p123", "-e", " source D:\\Final_Final_Viva\\Backups\\"+name+".sql" };
            Process runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            processComplete = runtimeProcess.waitFor();
            if(processComplete == 1){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(RootPane, "Restore Failed", "Error", JOptionPane.ERROR_MESSAGE);
                jPasswordField1.setText("");
                jPasswordField1.requestFocus();
            }else if(processComplete == 0){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(RootPane, "Restore Completed", "Message", JOptionPane.INFORMATION_MESSAGE);
                jPasswordField1.setText("");
                jPasswordField1.requestFocus();
                new User_accounts().setVisible(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
