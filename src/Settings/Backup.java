/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;

import CLS.DB;
import java.awt.Component;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.security.CodeSource;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ashan Kolambage
 */
public class Backup extends javax.swing.JPanel {
    private Component RootPane;

    /**
     * Creates new form create_account
     */
    public Backup() {
        initComponents();
        autogen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(163, 163, 163));
        setMaximumSize(new java.awt.Dimension(427, 252));
        setMinimumSize(new java.awt.Dimension(427, 252));
        setPreferredSize(new java.awt.Dimension(427, 252));
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("Create Backup");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 200, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Fil Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("User Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Passowrd");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jTextField1.setEditable(false);
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 320, 33));

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 320, 33));

        jPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });
        add(jPasswordField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 320, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String s = new String(jPasswordField1.getPassword());
        Date d = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdf2 = new SimpleDateFormat("HH:mm:ss");
        String d1 = sdf1.format(d);
        String d2 = sdf2.format(d);
        if (s.isEmpty()){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(RootPane, "Please Enter The Password", "Error", JOptionPane.ERROR_MESSAGE);
            jPasswordField1.requestFocus();
        }else{
            try {
                ResultSet rs = DB.getCon().createStatement().executeQuery("SELECT password FROM login WHERE username = '"+jTextField2.getText()+"'");
                    while (rs.next()){
                        if (rs.getString("password").equals(s)){
                            DB.getCon().createStatement().executeUpdate("INSERT INTO backup VALUES('"+jTextField1.getText()+"','"+d1+"','"+d2+"','"+Login.User_login.user+"')");
                            backup();
                            clear();
                        }else{
                            Toolkit.getDefaultToolkit().beep();
                            JOptionPane.showMessageDialog(RootPane, "Password Is Incorrect", "Error", JOptionPane.ERROR_MESSAGE);
                            jPasswordField1.requestFocus();
                        }
                    }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed

        jPasswordField1.requestFocus();
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange

        jPasswordField1.requestFocus();
    }//GEN-LAST:event_formPropertyChange

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed

        jButton2.requestFocus();
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void autogen() {
        try {
            ResultSet rs = DB.getCon().createStatement().executeQuery("SELECT * FROM backup");
                if (!rs.next()){
                    jTextField1.setText("bc_00001");
                }else{
                    rs = DB.getCon().createStatement().executeQuery("SELECT MAX(backup_id) FROM backup");
                    while (rs.next()){
                        String s = rs.getString("MAX(backup_id)");
                        int i = Integer.parseInt(s.substring(3, 8));
                        i+=1;
                        NumberFormat formatter = new DecimalFormat("00000");
                        jTextField1.setText("bc_" + formatter.format(i));
                    }
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
        jTextField2.setText(Login.User_login.user);
    }

    private void backup() {
        String name = jTextField1.getText();
        try {
            String executeCmd = "";
            executeCmd = "mysqldump -uroot -p123 radisiz_final -r D:\\Final_Final_Viva\\Backups\\"+name+".sql";
            Process runtimeProcess =Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();
            if(processComplete == 1){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(RootPane, "Backup Failed", "Error", JOptionPane.ERROR_MESSAGE);
                jPasswordField1.requestFocus();
            }else if(processComplete == 0){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(RootPane, "Backup Completed", "Message", JOptionPane.INFORMATION_MESSAGE);
                jPasswordField1.requestFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clear() {
        jTextField1.setText("");
        jTextField2.setText("");
        jPasswordField1.setText("");
        jPasswordField1.requestFocus();
        autogen();
    }
}
